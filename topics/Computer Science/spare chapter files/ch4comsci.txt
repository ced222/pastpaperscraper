Candidates should be able to:
Show understanding of the basic Von Neumann
model for a computer system and the stored
program concept
Notes and guidance
Show understanding of the purpose and role of
registers, including the difference between general
purpose and special purpose registers
Special purpose registers including:
• Program Counter (PC)
• Memory Data Register (MDR)
• Memory Address Register (MAR)
• The Accumulator (ACC)
• Index Register (IX)
• Current Instruction Register (CIR)
• Status Register
Show understanding of the purpose and roles of the
Arithmetic and Logic Unit (ALU), Control Unit (CU)
and system clock, Immediate Access Store (IAS)
Show understanding of how data are transferred
between various components of the computer
system using the address bus, data bus and control
bus
Show understanding of how factors contribute to
the performance of the computer system
Including:
• processor type and number of cores
• the bus width
• clock speed
• cache memory
Understand how different ports provide connection
to peripheral devices
Including connection to:
• Universal Serial Bus (USB)
• High Definition Multimedia Interface (HDMI)
• Video Graphics Array (VGA)
Describe the stages of the Fetch-Execute (F-E) cycle Describe and use ‘register transfer’ notation to
describe the F-E cycle
Show understanding of the purpose of interrupts Including:
• possible causes of interrupts
• applications of interrupts
• use of an Interrupt Service handling Routine
(ISR)
• when interrupts are detected during the fetchexecute cycle
• how interrupts are handled
Cambridge International AS & A Level Computer Science 9618 syllabus for 2024 and 2025. Subject content
Back to contents page www.cambridgeinternational.org/alevel 20
4.2 Assembly Language
Candidates should be able to:
Show understanding of the relationship between
assembly language and machine code
Notes and guidance
Describe the different stages of the assembly
process for a two-pass assembler
Apply the two-pass assembler process to a given
simple assembly language program
Trace a given simple assembly language program
Show understanding that a set of instructions are
grouped
Including the following groups:
• Data movement
• Input and output of data
• Arithmetic operations
• Unconditional and conditional instructions
• Compare instructions
Show understanding of and be able to use different
modes of addressing
Including immediate, direct, indirect, indexed,
relative
Cambridge International AS & A Level Computer Science 9618 syllabus for 2024 and 2025. Subject content
Back to contents page www.cambridgeinternational.org/alevel 21
The following table is an example of an instruction set:
Instruction Explanation
Opcode Operand
LDM #n Immediate addressing. Load the number n to ACC
LDD <address> Direct addressing. Load the contents of the location at the given address
to ACC
LDI <address> Indirect addressing. The address to be used is at the given address.
Load the contents of this second address to ACC
LDX <address> Indexed addressing. Form the address from <address> + the contents of
the index register. Copy the contents of this calculated address to ACC
LDR #n Immediate addressing. Load the number n to IX
MOV <register> Move the contents of the accumulator to the given register (IX)
STO <address> Store the contents of ACC at the given address
ADD <address> Add the contents of the given address to the ACC
ADD #n/Bn/&n Add the number n to the ACC
SUB <address> Subtract the contents of the given address from the ACC
SUB #n/Bn/&n Subtract the number n from the ACC
INC <register> Add 1 to the contents of the register (ACC or IX)
DEC <register> Subtract 1 from the contents of the register (ACC or IX)
JMP <address> Jump to the given address
CMP <address> Compare the contents of ACC with the contents of <address>
CMP #n Compare the contents of ACC with number n
CMI <address> Indirect addressing. The address to be used is at the given address.
Compare the contents of ACC with the contents of this second address
JPE <address> Following a compare instruction, jump to <address> if the compare was
True
JPN <address> Following a compare instruction, jump to <address> if the compare was
False
IN Key in a character and store its ASCII value in ACC
OUT Output to the screen the character whose ASCII value is stored in ACC
END Return control to the operating system
All questions will assume there is only one general purpose register available (Accumulator)
ACC denotes Accumulator
IX denotes Index Register
<address> can be an absolute or symbolic address
# denotes a denary number, e.g. #123
B denotes a binary number, e.g. B01001010
& denotes a hexadecimal number, e.g. &4A
Cambridge International AS & A Level Computer Science 9618 syllabus for 2024 and 2025. Subject content
Back to contents page www.cambridgeinternational.org/alevel 22
4.3 Bit manipulation
Candidates should be able to:
Show understanding of and perform binary shifts
Notes and guidance
Logical, arithmetic and cyclic
Left shift, right shift
Show understanding of how bit manipulation can be
used to monitor/control a device
Carry out bit manipulation operations
Test and set a bit (using bit masking)
Instruction
Label Opcode Operand Explanation
AND #n / Bn / &n Bitwise AND operation of the contents of ACC with the
operand
AND <address> Bitwise AND operation of the contents of ACC with the
contents of <address>
XOR #n / Bn / &n Bitwise XOR operation of the contents of ACC with the
operand
XOR <address> Bitwise XOR operation of the contents of ACC with the
contents of <address>
OR #n / Bn / &n Bitwise OR operation of the contents of ACC with the
operand
OR <address> Bitwise OR operation of the contents of ACC with the
contents of <address>
LSL #n Bits in ACC are shifted logically n places to the left. Zeros are
introduced on the right hand end
LSR #n Bits in ACC are shifted logically n places to the right. Zeros
are introduced on the left hand end
<label>: <opcode> <operand> Labels an instruction
<label>: <data> Gives a symbolic address <label> to the memory location
with contents <data>
All questions will assume there is only one general purpose register available (Accumulator)
ACC denotes Accumulator
IX denotes Index Register
<address> can be an absolute or symbolic address
# denotes a denary number, e.g. #123
B denotes a binary number, e.g. B01001010
& denotes a hexadecimal number, e.g. &4A